import requests
from bs4 import BeautifulSoup
import trafilatura
import pandas as pd
from datetime import datetime, timedelta
import re
import time
import random
from typing import List, Dict, Any, Optional
import json

class QuinielaScraperManager:
    """Gestiona el web scraping para obtener datos hist√≥ricos de Quiniela Loteka"""
    
    def __init__(self):
        # M√∫ltiples fuentes confiables para datos hist√≥ricos
        self.base_urls = [
            "https://loteka.com.do",  # Sitio oficial
            "https://www.bolomagico.com",  # Agregador confiable
            "https://loteriasdominicanas.com",  # Fuente secundaria
            "https://paginasamarillas.com.do"  # Fuente adicional
        ]
        
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'es-ES,es;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        # Patrones mejorados para m√∫ltiples fuentes
        self.number_patterns = {
            'loteka': [
                r'(?:1er\.|2do\.|3er\.)\s*(\d{2})',
                r'quiniela.*?(\d{2})\s*(\d{2})\s*(\d{2})'
            ],
            'bolomagico': [
                r'<span[^>]*class="[^"]*number[^"]*"[^>]*>(\d{2})</span>',
                r'Quiniela[^\d]*(\d{2})[^\d]*(\d{2})[^\d]*(\d{2})'
            ],
            'loteriasdominicanas': [
                r'quiniela\s+loteka[^\d]*(\d{2})(\d{2})(\d{2})',
                r'(\d{6})',  # 6 d√≠gitos consecutivos
            ],
            'generic': [
                r'quiniela.*?(\d{2})',
                r'resultado.*?(\d{2})',
                r'ganador.*?(\d{2})'
            ]
        }
        
        # Configuraci√≥n para recopilaci√≥n masiva de datos hist√≥ricos
        self.max_retries = 3
        self.retry_delay = 5  # segundos
        self.batch_size = 30  # d√≠as por lote
        self.request_delay = (2, 5)  # rango aleatorio de espera entre requests
    
    def _generate_realistic_sample_data(self) -> List[Dict[str, Any]]:
        """
        M√âTODO DESHABILITADO - NO generar datos de prueba
        El sistema SOLO debe usar datos reales de loteka.com.do
        """
        print("‚ùå Generaci√≥n de datos de prueba DESHABILITADA")
        print("‚úÖ Sistema configurado para usar SOLO datos reales")
        return []  # Retornar lista vac√≠a - NO datos de prueba
    
    def scrape_historical_data(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """
        Intenta obtener datos hist√≥ricos de m√∫ltiples fuentes
        
        Args:
            start_date: Fecha de inicio
            end_date: Fecha de fin
            
        Returns:
            Lista de resultados de sorteos
        """
        results = []
        
        # Agregar datos de TODAS las fuentes disponibles para completitud
        for base_url in self.base_urls:
            try:
                data = self._scrape_from_source(base_url, start_date, end_date)
                if data:
                    validated_data = self.validate_scraped_data(data)
                    if validated_data:
                        results.extend(validated_data)
                        print(f"Datos validados de {base_url}: {len(validated_data)} registros")
                    
            except Exception as e:
                print(f"Error obteniendo datos de {base_url}: {e}")
                continue
        
        # Deduplicar resultados finales
        results = self._deduplicate_by_date_position(results)
        
        # Si no se obtuvieron datos reales, reportar error en lugar de usar datos de prueba
        if not results:
            print("‚ùå NO se pudieron obtener datos reales de loteka.com.do")
            print("‚ùå Sistema NO utilizar√° datos de prueba - solo datos reales")
            # NO usar datos de muestra - mantener results vac√≠o
            results = []
        
        return results
    
    def _scrape_from_source(self, base_url: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """
        Intenta obtener datos de una fuente espec√≠fica
        """
        results = []
        
        try:
            # Permitir m√∫ltiples fuentes confiables para datos hist√≥ricos
            if "loteka.com.do" in base_url:
                possible_endpoints = [
                    f"{base_url}/quiniela",
                    f"{base_url}/resultados", 
                    f"{base_url}",
                ]
            elif "bolomagico.com" in base_url:
                possible_endpoints = [
                    f"{base_url}/en/loteria/loteka/",
                    f"{base_url}/loteria/loteka/"
                ]
            elif "loteriasdominicanas.com" in base_url:
                possible_endpoints = [
                    f"{base_url}",
                    f"{base_url}/resultados"
                ]
            else:
                possible_endpoints = [base_url]
            
            for endpoint in possible_endpoints:
                for attempt in range(self.max_retries):
                    try:
                        print(f"üîç Intento {attempt + 1}/{self.max_retries}: {endpoint}")
                        response = requests.get(endpoint, headers=self.headers, timeout=20)
                        
                        if response.status_code == 200:
                            # Usar trafilatura para extraer contenido limpio
                            text_content = trafilatura.extract(response.text)
                            
                            if text_content:
                                parsed_results = self._parse_lottery_content(text_content, start_date, end_date, endpoint)
                                
                                if parsed_results:
                                    results.extend(parsed_results)
                                    print(f"‚úÖ Datos obtenidos de {endpoint}: {len(parsed_results)} registros")
                                    return results  # Retornar en cuanto encontremos datos v√°lidos
                        else:
                            print(f"‚ö†Ô∏è Status {response.status_code} para {endpoint}")
                            
                    except requests.RequestException as e:
                        print(f"‚ùå Error en intento {attempt + 1}: {e}")
                        if attempt < self.max_retries - 1:
                            delay = self.retry_delay * (2 ** attempt)  # Exponential backoff
                            print(f"‚è≥ Reintentando en {delay} segundos...")
                            time.sleep(delay)
                        else:
                            print(f"‚ùå Fall√≥ despu√©s de {self.max_retries} intentos")
                
                # Pausa entre endpoints
                delay = random.uniform(*self.request_delay)
                print(f"‚è∏Ô∏è Pausa de {delay:.1f}s entre endpoints")
                time.sleep(delay)
        
        except Exception as e:
            print(f"‚ùå Error general scrapeando {base_url}: {e}")
        
        return results
    
    def _parse_lottery_content(self, content: str, start_date: datetime, end_date: datetime, source_url: str = "") -> List[Dict[str, Any]]:
        """
        Parsea el contenido extra√≠do buscando resultados de loter√≠a de las p√°ginas espec√≠ficas
        """
        results = []
        
        if not content:
            return results
        
        try:
            # Usar parser espec√≠fico seg√∫n la fuente
            if 'loteka.com.do' in source_url.lower():
                results.extend(self._parse_loteka_content(content, start_date, end_date))
                if not results:
                    results.extend(self._parse_generic_content(content, start_date, end_date))
            elif 'bolomagico.com' in source_url.lower():
                results.extend(self._parse_bolomagico_content(content, start_date, end_date))
            elif 'loteriasdominicanas.com' in source_url.lower():
                results.extend(self._parse_loteriasdominicanas_content(content, start_date, end_date))
            else:
                results.extend(self._parse_generic_content(content, start_date, end_date))
        
        except Exception as e:
            print(f"Error parseando contenido: {e}")
        
        return results
    
    def _parse_loteka_content(self, content: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """
        Parsea contenido espec√≠fico de loteka.com.do
        """
        results = []
        
        try:
            print(f"Parseando contenido de Loteka. Contenido: {len(content)} caracteres")
            
            # Dividir contenido en l√≠neas para procesamiento secuencial
            lines = content.split('\n')
            current_date = None
            i = 0
            
            while i < len(lines):
                line = lines[i].strip()
                
                # Buscar fechas (formato DD/MM/YYYY)
                date_match = re.search(r'(\d{1,2})/(\d{1,2})/(\d{4})', line)
                if date_match:
                    try:
                        day, month, year = date_match.groups()
                        parsed_date = datetime(int(year), int(month), int(day))
                        
                        if start_date <= parsed_date <= end_date:
                            current_date = parsed_date
                            print(f"Fecha v√°lida encontrada: {current_date.strftime('%Y-%m-%d')}")
                    except (ValueError, IndexError):
                        print(f"Error parseando fecha: {line}")
                
                # Si encontramos indicadores de posici√≥n, buscar n√∫meros en las siguientes l√≠neas
                # SOLO posiciones 1, 2, 3 para Quiniela Loteka
                if current_date and line in ['1er.', '2do.', '3er.']:
                    position = {'1er.': 1, '2do.': 2, '3er.': 3}.get(line, 0)
                    
                    # Buscar el n√∫mero en las siguientes l√≠neas
                    j = i + 1
                    while j < len(lines) and j < i + 3:  # Buscar hasta 3 l√≠neas adelante
                        next_line = lines[j].strip()
                        
                        # Verificar si la l√≠nea contiene solo n√∫meros de 1-2 d√≠gitos
                        if re.match(r'^\d{1,2}$', next_line):
                            try:
                                number = int(next_line)
                                if 0 <= number <= 99:
                                    result = {
                                        'date': current_date.strftime('%Y-%m-%d'),
                                        'number': number,
                                        'position': position,
                                        'prize_amount': 0,
                                        'draw_type': 'quiniela'
                                    }
                                    results.append(result)
                                    print(f"N√∫mero encontrado: {line} {number} para fecha {current_date.strftime('%Y-%m-%d')}")
                                    break
                            except ValueError:
                                pass
                        j += 1
                
                # Buscar patrones en l√≠nea con posiciones espec√≠ficas
                position_patterns = {
                    r'1er\.\s*(\d{2})': 1,
                    r'2do\.\s*(\d{2})': 2, 
                    r'3er\.\s*(\d{2})': 3,
                }
                
                for pattern, pos in position_patterns.items():
                    matches = re.findall(pattern, line)
                    for number_str in matches:
                        try:
                            number = int(number_str)
                            if 0 <= number <= 99 and current_date:
                                # Verificar que no hayamos agregado ya esta fecha-posici√≥n
                                duplicate_check = f"{current_date.strftime('%Y-%m-%d')}_{pos}"
                                if not any(f"{r['date']}_{r['position']}" == duplicate_check for r in results):
                                    result = {
                                        'date': current_date.strftime('%Y-%m-%d'),
                                        'number': number,
                                        'position': pos,  # Posici√≥n correcta basada en patr√≥n
                                        'prize_amount': 0,
                                        'draw_type': 'quiniela'
                                    }
                                    results.append(result)
                                    print(f"N√∫mero en l√≠nea encontrado: {number} (pos {pos}) para fecha {current_date.strftime('%Y-%m-%d')}")
                        except ValueError:
                            continue
                
                i += 1
        
        except Exception as e:
            print(f"‚ùå Error parseando contenido de Loteka: {e}")
        
        print(f"Total resultados parseados de Loteka: {len(results)}")
        return results
    
    def _parse_loteriasdominicanas_content(self, content: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """
        Parsea contenido espec√≠fico de loteriasdominicanas.com
        """
        results = []
        
        try:
            # Buscar patrones como "348996" (6 d√≠gitos para quiniela)
            lines = content.split('\n')
            
            current_date = datetime.now()
            
            for line in lines:
                line = line.strip()
                
                # Buscar fechas (formato DD-MM)
                date_match = re.search(r'(\d{1,2})-(\d{1,2})', line)
                if date_match:
                    try:
                        day, month = date_match.groups()
                        # Asumir a√±o actual
                        parsed_date = datetime(datetime.now().year, int(month), int(day))
                        if start_date <= parsed_date <= end_date:
                            current_date = parsed_date
                    except (ValueError, IndexError):
                        pass
                
                # Buscar n√∫meros de quiniela loteka con validaci√≥n estricta
                if 'quiniela' in line.lower() or 'loteka' in line.lower():
                    # Usar patrones definidos para loteriasdominicanas
                    patterns = self.number_patterns.get('loteriasdominicanas', [])
                    
                    for pattern in patterns:
                        if pattern == r'(\d{6})':
                            # N√∫mero de 6 d√≠gitos dividido en 3 pares
                            matches = re.findall(pattern, line)
                            for number_str in matches:
                                if len(number_str) == 6:
                                    for i in range(0, 6, 2):
                                        try:
                                            number = int(number_str[i:i+2])
                                            if 0 <= number <= 99:
                                                results.append({
                                                    'date': current_date.strftime('%Y-%m-%d'),
                                                    'number': number,
                                                    'position': (i // 2) + 1,
                                                    'prize_amount': 0,
                                                    'draw_type': 'quiniela'
                                                })
                                        except ValueError:
                                            continue
                        else:
                            # Otros patrones
                            matches = re.findall(pattern, line)
                            for match in matches:
                                if isinstance(match, tuple):
                                    # Patr√≥n con grupos m√∫ltiples
                                    for i, num_str in enumerate(match[:3]):
                                        try:
                                            number = int(num_str)
                                            if 0 <= number <= 99:
                                                results.append({
                                                    'date': current_date.strftime('%Y-%m-%d'),
                                                    'number': number,
                                                    'position': i + 1,
                                                    'prize_amount': 0,
                                                    'draw_type': 'quiniela'
                                                })
                                        except ValueError:
                                            continue
        
        except Exception as e:
            print(f"Error parseando contenido de LoteriasDominicanas: {e}")
        
        return results
    
    def _parse_generic_content(self, content: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """
        Parsing espec√≠fico SOLO para Quiniela Loteka (validaciones estrictas)
        """
        results = []
        
        try:
            lines = content.split('\n')
            current_date = None
            
            for line in lines:
                line_original = line.strip()
                line = line_original.lower()
                
                # Buscar fechas en diferentes formatos
                date_patterns = [
                    r'(\d{1,2})/(\d{1,2})/(\d{4})',
                    r'(\d{4})-(\d{1,2})-(\d{1,2})',
                    r'(\d{1,2})-(\d{1,2})-(\d{4})',
                ]
                
                for pattern in date_patterns:
                    date_match = re.search(pattern, line)
                    if date_match:
                        try:
                            if '/' in line:
                                day, month, year = date_match.groups()
                            elif '-' in line and date_match.group(1).isdigit() and len(date_match.group(1)) == 4:
                                year, month, day = date_match.groups()
                            else:
                                day, month, year = date_match.groups()
                                
                            parsed_date = datetime(int(year), int(month), int(day))
                            
                            if start_date <= parsed_date <= end_date:
                                current_date = parsed_date
                            break
                        except (ValueError, IndexError):
                            continue
                
                # VALIDACI√ìN ESTRICTA: Solo procesar l√≠neas que contengan ESPEC√çFICAMENTE "quiniela loteka"
                if current_date and ('quiniela loteka' in line or 'loteka quiniela' in line):
                    simple_patterns = [r'(\d{2})']
                    for pattern in simple_patterns:
                        numbers = re.findall(pattern, line_original)  # Usar l√≠nea original para n√∫meros
                        for i, number_str in enumerate(numbers[:3]):  # Limitar a 3 n√∫meros por l√≠nea
                            try:
                                number = int(number_str)
                                if 0 <= number <= 99:
                                    results.append({
                                        'date': current_date.strftime('%Y-%m-%d'),
                                        'number': number,
                                        'position': i + 1,
                                        'prize_amount': 0,
                                        'draw_type': 'quiniela'  # Asegurar que es quiniela
                                    })
                                    print(f"üìç Quiniela Loteka gen√©rica encontrada: {number} para fecha {current_date.strftime('%Y-%m-%d')}")
                            except ValueError:
                                continue
        
        except Exception as e:
            print(f"Error en parsing de Quiniela Loteka: {e}")
        
        print(f"Total resultados de Quiniela Loteka (gen√©rico): {len(results)}")
        return results
    
    def get_latest_results(self) -> List[Dict[str, Any]]:
        """
        Obtiene los resultados m√°s recientes disponibles
        """
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)  # √öltima semana
        
        return self.scrape_historical_data(start_date, end_date)
    
    def validate_scraped_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Valida y limpia los datos obtenidos con validaci√≥n estricta
        """
        if not data:
            return []
            
        validated_data = []
        date_position_tracker = {}  # Para rastrear posiciones por fecha
        
        for item in data:
            try:
                # Validar campos requeridos
                if not all(key in item for key in ['date', 'number']):
                    continue
                
                # Validar fecha
                try:
                    parsed_date = datetime.strptime(item['date'], '%Y-%m-%d')
                    date_str = item['date']
                except ValueError:
                    print(f"‚ùå Fecha inv√°lida: {item.get('date', 'N/A')}")
                    continue
                
                # Validar n√∫mero (rango Quiniela: 0-99)
                try:
                    number = int(item['number'])
                    if not (0 <= number <= 99):
                        print(f"‚ùå N√∫mero fuera de rango: {number}")
                        continue
                except (ValueError, TypeError):
                    print(f"‚ùå N√∫mero inv√°lido: {item.get('number', 'N/A')}")
                    continue
                
                # Validar posici√≥n (1, 2, 3 solamente)
                position = item.get('position', 1)
                if not isinstance(position, int) or position < 1 or position > 3:
                    print(f"‚ùå Posici√≥n inv√°lida {position} para fecha {date_str}")
                    continue
                
                # Verificar duplicados por fecha-posici√≥n
                date_pos_key = f"{date_str}_{position}"
                if date_pos_key in date_position_tracker:
                    existing_number = date_position_tracker[date_pos_key]
                    print(f"‚ö†Ô∏è Duplicado detectado para {date_str} posici√≥n {position}: {existing_number} vs {number}")
                    continue  # Saltar duplicados
                
                # Registrar en tracker
                date_position_tracker[date_pos_key] = number
                
                # Normalizar datos
                validated_item = {
                    'date': date_str,
                    'number': number,
                    'position': position,
                    'prize_amount': item.get('prize_amount', 0),
                    'draw_type': 'quiniela'
                }
                
                validated_data.append(validated_item)
                
            except Exception as e:
                print(f"‚ùå Error validando item {item}: {e}")
                continue
        
        # Verificar completitud por fecha
        self._verify_date_completeness(validated_data)
        
        print(f"üìä Total datos validados: {len(validated_data)}")
        return validated_data
    
    def _verify_date_completeness(self, data: List[Dict[str, Any]]) -> None:
        """
        Verifica que cada fecha tenga los 3 n√∫meros esperados (posiciones 1, 2, 3)
        """
        date_counts = {}
        
        for item in data:
            date_str = item['date']
            if date_str not in date_counts:
                date_counts[date_str] = set()
            date_counts[date_str].add(item['position'])
        
        complete_dates = 0
        incomplete_dates = 0
        
        for date_str, positions in date_counts.items():
            expected_positions = {1, 2, 3}
            if positions == expected_positions:
                complete_dates += 1
            else:
                incomplete_dates += 1
                missing = expected_positions - positions
                print(f"‚ö†Ô∏è Fecha incompleta {date_str}: faltan posiciones {missing}")
        
        print(f"üìã Fechas completas: {complete_dates}, incompletas: {incomplete_dates}")
        
        if incomplete_dates > complete_dates * 0.5:  # M√°s del 50% incompletas
            print(f"‚ö†Ô∏è ADVERTENCIA: Muchas fechas incompletas ({incomplete_dates}/{len(date_counts)}). Los datos podr√≠an tener problemas de calidad.")
    
    def get_scraping_status(self) -> Dict[str, Any]:
        """
        Obtiene el estado del sistema de scraping
        """
        status = {
            'sources_available': len(self.base_urls),
            'last_attempt': datetime.now().isoformat(),
            'sample_data_available': 0,  # Ya no hay datos de prueba
            'real_data_only': True,  # Solo datos reales
            'status': 'ready'
        }
        
        return status
        
    def scrape_massive_historical_data(self, target_days: int = 720) -> List[Dict[str, Any]]:
        """
        Recopila datos hist√≥ricos masivos para el n√∫mero de d√≠as especificado
        
        Args:
            target_days: N√∫mero de d√≠as de datos hist√≥ricos a recopilar (por defecto 720)
            
        Returns:
            Lista de resultados de sorteos
        """
        print(f"üéØ INICIANDO recopilaci√≥n masiva de {target_days} d√≠as de datos hist√≥ricos")
        
        all_results = []
        end_date = datetime.now()
        start_date = end_date - timedelta(days=target_days)
        
        # Dividir en lotes para procesamiento eficiente
        current_date = start_date
        batch_count = 0
        
        while current_date <= end_date:
            batch_end = min(current_date + timedelta(days=self.batch_size), end_date)
            batch_count += 1
            
            print(f"üì¶ Procesando lote {batch_count}: {current_date.strftime('%Y-%m-%d')} a {batch_end.strftime('%Y-%m-%d')}")
            
            # Intentar recopilar datos del lote actual
            batch_results = self._scrape_date_range_batch(current_date, batch_end)
            
            if batch_results:
                validated_results = self.validate_scraped_data(batch_results)
                all_results.extend(validated_results)
                print(f"‚úÖ Lote {batch_count}: {len(validated_results)} registros v√°lidos obtenidos")
            else:
                print(f"‚ö†Ô∏è Lote {batch_count}: Sin datos obtenidos")
            
            # Pausa entre lotes para ser respetuoso
            delay = random.uniform(*self.request_delay)
            print(f"‚è∏Ô∏è Pausa de {delay:.1f} segundos entre lotes...")
            time.sleep(delay)
            
            current_date = batch_end + timedelta(days=1)
        
        print(f"üéâ RECOPILACI√ìN COMPLETADA: {len(all_results)} registros hist√≥ricos obtenidos de {target_days} d√≠as")
        return all_results
    
    def _scrape_date_range_batch(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """
        Recopila datos de un rango espec√≠fico de fechas usando m√∫ltiples fuentes con agregaci√≥n
        """
        all_results = []
        successful_sources = 0
        
        # Intentar TODAS las fuentes para llenar vac√≠os (no hacer break)
        for base_url in self.base_urls:
            try:
                print(f"üîÑ Probando fuente: {base_url}")
                source_results = self._scrape_from_enhanced_source(base_url, start_date, end_date)
                
                if source_results:
                    # Validar datos de esta fuente antes de agregarlos
                    validated_source_results = self.validate_scraped_data(source_results)
                    if validated_source_results:
                        all_results.extend(validated_source_results)
                        successful_sources += 1
                        print(f"‚úÖ Datos obtenidos de {base_url}: {len(validated_source_results)} registros validados")
                    else:
                        print(f"‚ö†Ô∏è {base_url}: datos obtenidos pero no pasaron validaci√≥n")
                else:
                    print(f"‚ùå Sin datos de {base_url}")
                    
            except Exception as e:
                print(f"‚ùå Error en {base_url}: {e}")
                continue
        
        # Deduplicar por (fecha, posici√≥n) manteniendo el primer encontrado
        deduplicated_results = self._deduplicate_by_date_position(all_results)
        
        print(f"üìä Lote completado: {successful_sources}/{len(self.base_urls)} fuentes exitosas")
        print(f"üìä Total registros despu√©s de deduplicaci√≥n: {len(deduplicated_results)}")
        
        return deduplicated_results
    
    def _deduplicate_by_date_position(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Elimina duplicados bas√°ndose en (fecha, posici√≥n), manteniendo el primero
        """
        seen = set()
        deduplicated = []
        
        for item in data:
            key = (item['date'], item['position'])
            if key not in seen:
                seen.add(key)
                deduplicated.append(item)
            else:
                print(f"üîÑ Eliminando duplicado: {item['date']} pos {item['position']}")
        
        return deduplicated
    
    def _scrape_from_enhanced_source(self, base_url: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """
        Versi√≥n mejorada de scraping con soporte para m√∫ltiples fuentes y datos hist√≥ricos
        """
        results = []
        
        try:
            # Determinar endpoints espec√≠ficos seg√∫n la fuente
            endpoints = self._get_source_endpoints(base_url, start_date, end_date)
            
            for endpoint in endpoints:
                for attempt in range(self.max_retries):
                    try:
                        print(f"üîç Intento {attempt + 1}: {endpoint}")
                        response = requests.get(endpoint, headers=self.headers, timeout=20)
                        
                        if response.status_code == 200:
                            # Usar parsing espec√≠fico seg√∫n la fuente
                            parsed_results = self._parse_by_source(response.text, base_url, start_date, end_date)
                            
                            if parsed_results:
                                results.extend(parsed_results)
                                print(f"‚úÖ {len(parsed_results)} registros obtenidos de {endpoint}")
                                return results
                        else:
                            print(f"‚ö†Ô∏è Status {response.status_code} para {endpoint}")
                            
                    except requests.RequestException as e:
                        print(f"‚ùå Error en intento {attempt + 1} para {endpoint}: {e}")
                        if attempt < self.max_retries - 1:
                            time.sleep(self.retry_delay)
                
                # Pausa entre endpoints
                time.sleep(random.uniform(1, 3))
                
        except Exception as e:
            print(f"‚ùå Error general en scraping de {base_url}: {e}")
            
        return results
    
    def _get_source_endpoints(self, base_url: str, start_date: datetime, end_date: datetime) -> List[str]:
        """
        Genera endpoints con iteraci√≥n real d√≠a por d√≠a para datos hist√≥ricos
        """
        endpoints = []
        
        if "loteka.com.do" in base_url:
            # Endpoints est√°ticos para Loteka oficial
            endpoints.extend([
                f"{base_url}/quiniela",
                f"{base_url}/resultados",
                f"{base_url}",
            ])
            
            # Intentar endpoints por fecha si existen
            current_date = start_date
            while current_date <= end_date:
                date_formats = [
                    current_date.strftime("%Y-%m-%d"),
                    current_date.strftime("%d-%m-%Y"),
                    current_date.strftime("%Y/%m/%d"),
                ]
                
                for date_str in date_formats:
                    endpoints.extend([
                        f"{base_url}/resultados/{date_str}",
                        f"{base_url}/quiniela/{date_str}",
                        f"{base_url}/historico/{date_str}",
                    ])
                
                current_date += timedelta(days=1)  # Iteraci√≥n d√≠a por d√≠a
                
        elif "bolomagico.com" in base_url:
            # Bolomagico: iterar d√≠a por d√≠a
            current_date = start_date
            while current_date <= end_date:
                date_str = current_date.strftime("%Y-%m-%d")
                date_str_alt = current_date.strftime("%Y/%m/%d")
                date_str_short = current_date.strftime("%m-%d-%Y")
                
                endpoints.extend([
                    f"{base_url}/en/loteria/loteka/{date_str}",
                    f"{base_url}/loteria/loteka/{date_str}",
                    f"{base_url}/en/lottery-results/{date_str_alt}",
                    f"{base_url}/results/{date_str_short}",
                ])
                
                current_date += timedelta(days=1)  # D√≠a por d√≠a para completitud
                
        elif "loteriasdominicanas.com" in base_url:
            # Loter√≠as Dominicanas: iterar d√≠a por d√≠a
            current_date = start_date
            while current_date <= end_date:
                date_str = current_date.strftime("%d-%m-%Y")  # DD-MM-YYYY
                date_str_alt = current_date.strftime("%Y-%m-%d")  # YYYY-MM-DD
                
                endpoints.extend([
                    f"{base_url}/resultados/{date_str}",
                    f"{base_url}/loteka/{date_str}",
                    f"{base_url}/results/{date_str_alt}",
                    f"{base_url}/historical/{date_str}",
                ])
                
                current_date += timedelta(days=1)  # D√≠a por d√≠a
        else:
            # Para otras fuentes, endpoints b√°sicos
            endpoints.extend([f"{base_url}", f"{base_url}/lottery", f"{base_url}/results"])
            
        # Agregar endpoints base al final
        endpoints.extend([
            f"{base_url}/en/loteria/loteka/" if "bolomagico.com" in base_url else f"{base_url}",
        ])
            
        return endpoints
    
    def _parse_by_source(self, content: str, base_url: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """
        Parser espec√≠fico seg√∫n la fuente
        """
        results = []
        
        try:
            # Extraer contenido con trafilatura
            clean_content = trafilatura.extract(content)
            if not clean_content:
                clean_content = content
            
            # Parser espec√≠fico por fuente
            if "loteka.com.do" in base_url:
                results = self._parse_loteka_content(clean_content, start_date, end_date)
            elif "bolomagico.com" in base_url:
                results = self._parse_bolomagico_content(clean_content, start_date, end_date)
            elif "loteriasdominicanas.com" in base_url:
                results = self._parse_loteriasdominicanas_content(clean_content, start_date, end_date)
            else:
                results = self._parse_generic_content(clean_content, start_date, end_date)
                
        except Exception as e:
            print(f"‚ùå Error parseando contenido de {base_url}: {e}")
            
        return results
    
    def _parse_bolomagico_content(self, content: str, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """
        Parser espec√≠fico para bolomagico.com
        """
        results = []
        
        try:
            lines = content.split('\\n')
            current_date = None
            
            for line in lines:
                line = line.strip()
                
                # Buscar fechas en formato bolomagico
                date_patterns = [
                    r'(\\d{4})-(\\d{1,2})-(\\d{1,2})',
                    r'(\\d{1,2})/(\\d{1,2})/(\\d{4})',
                    r'(\\d{1,2})-(\\d{1,2})-(\\d{4})'
                ]
                
                for pattern in date_patterns:
                    date_match = re.search(pattern, line)
                    if date_match:
                        try:
                            groups = date_match.groups()
                            if len(groups[0]) == 4:  # Formato YYYY-MM-DD
                                year, month, day = groups
                            else:  # Formato DD/MM/YYYY o DD-MM-YYYY
                                day, month, year = groups
                                
                            parsed_date = datetime(int(year), int(month), int(day))
                            if start_date <= parsed_date <= end_date:
                                current_date = parsed_date
                        except (ValueError, IndexError):
                            continue
                
                # Buscar n√∫meros de Quiniela Loteka
                if current_date and ('quiniela' in line.lower() or 'loteka' in line.lower()):
                    # Usar patrones espec√≠ficos de bolomagico
                    patterns = self.number_patterns.get('bolomagico', [])
                    for pattern in patterns:
                        matches = re.findall(pattern, line)
                        for i, match in enumerate(matches[:3]):
                            try:
                                # Manejar diferentes tipos de matches
                                if isinstance(match, tuple):
                                    number_str = match[0] if match[0] else match[1] if len(match) > 1 else ''
                                else:
                                    number_str = match
                                    
                                number = int(number_str)
                                if 0 <= number <= 99:
                                    results.append({
                                        'date': current_date.strftime('%Y-%m-%d'),
                                        'number': number,
                                        'position': i + 1,
                                        'prize_amount': 0,
                                        'draw_type': 'quiniela'
                                    })
                            except (ValueError, IndexError):
                                continue
                    
                    # Patr√≥n gen√©rico para n√∫meros consecutivos de 2 d√≠gitos
                    generic_pattern = r'(\d{2})\s+(\d{2})\s+(\d{2})'
                    matches = re.findall(generic_pattern, line)
                    if matches and not results:  # Solo si no encontramos con patrones espec√≠ficos
                        for match_group in matches:
                            for i, number_str in enumerate(match_group):
                                try:
                                    number = int(number_str)
                                    if 0 <= number <= 99:
                                        results.append({
                                            'date': current_date.strftime('%Y-%m-%d'),
                                            'number': number,
                                            'position': i + 1,
                                            'prize_amount': 0,
                                            'draw_type': 'quiniela'
                                        })
                                except ValueError:
                                    continue
                                
        except Exception as e:
            print(f"‚ùå Error parseando contenido de bolomagico: {e}")
            
        return results
