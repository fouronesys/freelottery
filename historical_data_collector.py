#!/usr/bin/env python3
"""
Recopilador de Datos Hist√≥ricos de Quiniela Loteka
Sistema mejorado para obtener al menos 720 d√≠as de datos hist√≥ricos
"""

import sys
import os
from datetime import datetime, timedelta
from typing import List, Dict, Any
import time

# Importar nuestros m√≥dulos
from database import DatabaseManager
from scraper import QuinielaScraperManager

class HistoricalDataCollector:
    """Clase principal para coordinar la recopilaci√≥n masiva de datos hist√≥ricos"""
    
    def __init__(self):
        self.db = DatabaseManager()
        self.scraper = QuinielaScraperManager()
        
    def collect_720_days_data(self) -> bool:
        """
        Funci√≥n principal para recopilar 720+ d√≠as de datos hist√≥ricos
        
        Returns:
            bool: True si la recopilaci√≥n fue exitosa
        """
        print("üéØ INICIANDO RECOPILACI√ìN MASIVA DE DATOS HIST√ìRICOS DE QUINIELA LOTEKA")
        print("=" * 70)
        
        # Verificar estado actual
        initial_stats = self.db.get_database_stats()
        print(f"üìä Estado inicial de la base de datos:")
        print(f"   ‚Ä¢ Total registros: {initial_stats['total_records']}")
        print(f"   ‚Ä¢ Fechas √∫nicas: {initial_stats['unique_dates']}")
        print(f"   ‚Ä¢ Rango de d√≠as: {initial_stats['date_range_days']}")
        print(f"   ‚Ä¢ ¬øTiene 720+ d√≠as?: {'‚úÖ S√≠' if initial_stats['has_720_days'] else '‚ùå No'}")
        
        if initial_stats['has_720_days']:
            print("üéâ ¬°Ya tenemos 720+ d√≠as de datos!")
            return True
        
        # Calcular d√≠as faltantes
        target_days = 720
        days_needed = max(0, target_days - initial_stats['date_range_days'])
        
        print(f"\nüéØ OBJETIVO: Recopilar {target_days} d√≠as de datos hist√≥ricos")
        print(f"üìà D√≠as adicionales necesarios: {days_needed}")
        
        start_time = datetime.now()
        
        try:
            # Recopilar datos hist√≥ricos masivos
            print("\nüöÄ Iniciando recopilaci√≥n de datos...")
            historical_results = self.scraper.scrape_massive_historical_data(target_days)
            
            if not historical_results:
                print("‚ùå No se pudieron obtener datos hist√≥ricos")
                return False
            
            # Guardar datos en la base de datos
            print(f"\nüíæ Guardando {len(historical_results)} registros en la base de datos...")
            saved_count = self.db.save_multiple_draw_results(historical_results)
            
            # Verificar resultado final
            final_stats = self.db.get_database_stats()
            
            print("\nüéâ RECOPILACI√ìN COMPLETADA")
            print("=" * 50)
            print(f"üìä Estado final de la base de datos:")
            print(f"   ‚Ä¢ Total registros: {final_stats['total_records']} (+{final_stats['total_records'] - initial_stats['total_records']})")
            print(f"   ‚Ä¢ Fechas √∫nicas: {final_stats['unique_dates']} (+{final_stats['unique_dates'] - initial_stats['unique_dates']})")
            print(f"   ‚Ä¢ Rango de d√≠as: {final_stats['date_range_days']} (+{final_stats['date_range_days'] - initial_stats['date_range_days']})")
            print(f"   ‚Ä¢ ¬øTiene 720+ d√≠as?: {'‚úÖ S√≠' if final_stats['has_720_days'] else '‚ùå No'}")
            print(f"   ‚Ä¢ Registros guardados: {saved_count}")
            
            # Estad√≠sticas de tiempo
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            print(f"   ‚Ä¢ Tiempo transcurrido: {duration:.1f} segundos")
            
            # Determinar √©xito
            success = final_stats['has_720_days'] and saved_count > 0
            
            if success:
                print("\nüéâ ¬°√âXITO! Sistema ahora tiene 720+ d√≠as de datos hist√≥ricos")
                print("üìà Las predicciones tendr√°n mayor precisi√≥n con este volumen de datos")
            else:
                print("\n‚ö†Ô∏è Recopilaci√≥n parcial - se necesitan m√°s datos")
                
            return success
            
        except Exception as e:
            print(f"‚ùå Error durante la recopilaci√≥n: {e}")
            return False
    
    def verify_data_quality(self) -> Dict[str, Any]:
        """
        Verifica la calidad de los datos recopilados
        """
        print("\nüîç VERIFICANDO CALIDAD DE DATOS...")
        
        stats = self.db.get_database_stats()
        quality_report = {
            'total_records': stats['total_records'],
            'unique_dates': stats['unique_dates'],
            'date_range_days': stats['date_range_days'],
            'has_minimum_data': stats['has_720_days'],
            'data_density': 0,
            'issues': []
        }
        
        if stats['total_records'] > 0 and stats['unique_dates'] > 0:
            # Calcular densidad de datos (registros por d√≠a)
            quality_report['data_density'] = stats['total_records'] / stats['unique_dates']
            
            # Verificar densidad esperada (3 n√∫meros por d√≠a = 3 registros por d√≠a)
            expected_density = 3.0
            if quality_report['data_density'] < expected_density * 0.8:  # 80% del esperado
                quality_report['issues'].append("Baja densidad de datos - posibles d√≠as faltantes")
            
            # Verificar rango de fechas
            if stats['date_range_days'] < 720:
                days_missing = 720 - stats['date_range_days']
                quality_report['issues'].append(f"Faltan {days_missing} d√≠as para alcanzar el objetivo de 720 d√≠as")
        
        print(f"   ‚úÖ Registros totales: {quality_report['total_records']}")
        print(f"   ‚úÖ Fechas √∫nicas: {quality_report['unique_dates']}")
        print(f"   ‚úÖ Rango de d√≠as: {quality_report['date_range_days']}")
        print(f"   ‚úÖ Densidad de datos: {quality_report['data_density']:.2f} registros/d√≠a")
        print(f"   ‚úÖ Objetivo 720+ d√≠as: {'‚úÖ Cumplido' if quality_report['has_minimum_data'] else '‚ùå Pendiente'}")
        
        if quality_report['issues']:
            print("   ‚ö†Ô∏è Problemas detectados:")
            for issue in quality_report['issues']:
                print(f"      ‚Ä¢ {issue}")
        else:
            print("   üéâ ¬°Calidad de datos excelente!")
            
        return quality_report

def main():
    """Funci√≥n principal para ejecutar la recopilaci√≥n de datos"""
    collector = HistoricalDataCollector()
    
    print("üéØ RECOPILADOR DE DATOS HIST√ìRICOS - QUINIELA LOTEKA")
    print("Objetivo: Obtener al menos 720 d√≠as de datos para mejorar predicciones")
    print("=" * 70)
    
    # Recopilar datos
    success = collector.collect_720_days_data()
    
    # Verificar calidad
    quality_report = collector.verify_data_quality()
    
    # Resultado final
    if success and quality_report['has_minimum_data']:
        print("\nüéâ MISI√ìN CUMPLIDA: Sistema listo con 720+ d√≠as de datos hist√≥ricos")
        return 0
    else:
        print("\n‚ö†Ô∏è RECOPILACI√ìN PARCIAL: Se necesita m√°s trabajo para obtener todos los datos")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)