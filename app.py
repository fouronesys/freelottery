import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from datetime import datetime, timedelta
import time

from database import DatabaseManager
from scraper import QuinielaScraperManager
from analyzer import StatisticalAnalyzer
from predictor import LotteryPredictor
from utils import format_currency, format_percentage

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="An√°lisis Estad√≠stico Quiniela Loteka",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Inicializaci√≥n de componentes
@st.cache_resource
def init_components():
    db = DatabaseManager()
    scraper = QuinielaScraperManager()
    analyzer = StatisticalAnalyzer(db)
    predictor = LotteryPredictor(analyzer)
    return db, scraper, analyzer, predictor

db, scraper, analyzer, predictor = init_components()

# T√≠tulo principal
st.title("üéØ Sistema de An√°lisis Estad√≠stico - Quiniela Loteka")
st.markdown("### Predicci√≥n de n√∫meros basada en an√°lisis de frecuencia hist√≥rica")

# Sidebar para controles
st.sidebar.header("‚öôÔ∏è Configuraci√≥n")

# Control de actualizaci√≥n de datos
if st.sidebar.button("üîÑ Actualizar Datos Hist√≥ricos", type="primary"):
    with st.spinner("Recopilando datos hist√≥ricos..."):
        try:
            # Intentar obtener datos de los √∫ltimos 30 d√≠as
            end_date = datetime.now()
            start_date = end_date - timedelta(days=30)
            
            results = scraper.scrape_historical_data(start_date, end_date)
            
            if results:
                saved_count = 0
                for result in results:
                    if db.save_draw_result(result):
                        saved_count += 1
                
                st.sidebar.success(f"‚úÖ {saved_count} nuevos sorteos guardados")
            else:
                st.sidebar.warning("‚ö†Ô∏è No se encontraron datos nuevos")
                
        except Exception as e:
            st.sidebar.error(f"‚ùå Error al actualizar datos: {str(e)}")

# Configuraci√≥n de an√°lisis
st.sidebar.subheader("üìä Par√°metros de An√°lisis")
days_to_analyze = st.sidebar.slider(
    "D√≠as a analizar",
    min_value=30,
    max_value=365,
    value=180,
    step=30,
    help="N√∫mero de d√≠as hacia atr√°s para el an√°lisis estad√≠stico"
)

prediction_method = st.sidebar.selectbox(
    "M√©todo de Predicci√≥n",
    ["Frecuencia Hist√≥rica", "Tendencia Reciente", "Combinado"],
    help="M√©todo utilizado para generar las predicciones"
)

# Pesta√±as principales
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
    "üìà Dashboard Principal",
    "üî¢ An√°lisis de N√∫meros",
    "üéØ Predicciones",
    "üìä Estad√≠sticas Avanzadas",
    "‚è∞ An√°lisis Temporal",
    "ü§ù Co-ocurrencia y Patrones",
    "üìÖ Recomendaciones por D√≠a"
])

with tab1:
    st.header("üìà Dashboard Principal")
    
    # Estad√≠sticas generales
    col1, col2, col3, col4 = st.columns(4)
    
    total_draws = db.get_total_draws()
    recent_draws = db.get_draws_count_last_days(30)
    
    with col1:
        st.metric(
            label="Total de Sorteos",
            value=total_draws,
            help="N√∫mero total de sorteos en la base de datos"
        )
    
    with col2:
        st.metric(
            label="Sorteos √öltimos 30 d√≠as",
            value=recent_draws,
            help="Sorteos recopilados en el √∫ltimo mes"
        )
    
    with col3:
        if total_draws > 0:
            coverage_days = db.get_data_coverage_days()
            st.metric(
                label="D√≠as de Cobertura",
                value=coverage_days,
                help="D√≠as cubiertos por los datos hist√≥ricos"
            )
        else:
            st.metric("D√≠as de Cobertura", "0")
    
    with col4:
        last_update = db.get_last_update_date()
        if last_update:
            days_since = (datetime.now() - last_update).days
            st.metric(
                label="√öltima Actualizaci√≥n",
                value=f"Hace {days_since} d√≠as",
                help=f"√öltima vez que se actualizaron los datos: {last_update.strftime('%Y-%m-%d')}"
            )
        else:
            st.metric("√öltima Actualizaci√≥n", "Sin datos")
    
    if total_draws > 0:
        # An√°lisis de frecuencia b√°sico
        st.subheader("üî• N√∫meros M√°s Frecuentes (√öltimos 30 d√≠as)")
        
        hot_numbers = analyzer.get_hot_numbers(days=30, limit=10)
        if hot_numbers:
            df_hot = pd.DataFrame.from_records(hot_numbers, columns=['N√∫mero', 'Frecuencia', 'Frecuencia Relativa'])
            
            fig = px.bar(
                df_hot,
                x='N√∫mero',
                y='Frecuencia',
                title="Top 10 N√∫meros M√°s Frecuentes",
                labels={'Frecuencia': 'Veces que ha salido'},
                color='Frecuencia',
                color_continuous_scale='Reds'
            )
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, width='stretch')
        
        # N√∫meros fr√≠os
        st.subheader("üßä N√∫meros Menos Frecuentes (√öltimos 30 d√≠as)")
        
        cold_numbers = analyzer.get_cold_numbers(days=30, limit=10)
        if cold_numbers:
            df_cold = pd.DataFrame.from_records(cold_numbers, columns=['N√∫mero', 'Frecuencia', 'Frecuencia Relativa'])
            
            fig = px.bar(
                df_cold,
                x='N√∫mero',
                y='Frecuencia',
                title="Top 10 N√∫meros Menos Frecuentes",
                labels={'Frecuencia': 'Veces que ha salido'},
                color='Frecuencia',
                color_continuous_scale='Blues'
            )
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, width='stretch')
    else:
        st.warning("‚ö†Ô∏è No hay datos hist√≥ricos disponibles. Haz clic en 'Actualizar Datos Hist√≥ricos' para comenzar.")

with tab2:
    st.header("üî¢ An√°lisis Detallado de N√∫meros")
    
    if total_draws > 0:
        # Tabla de frecuencias completa
        all_frequencies = analyzer.calculate_all_frequencies(days=days_to_analyze)
        
        if all_frequencies:
            df_freq = pd.DataFrame.from_records(all_frequencies, columns=['N√∫mero', 'Frecuencia Absoluta', 'Frecuencia_Relativa_Num', 'Clasificaci√≥n'])
            # Crear columna formateada para mostrar
            df_freq['Frecuencia Relativa'] = df_freq['Frecuencia_Relativa_Num'].apply(lambda x: f"{x:.2%}")
            
            st.subheader(f"üìã Tabla de Frecuencias ({days_to_analyze} d√≠as)")
            
            # Filtros
            col1, col2 = st.columns(2)
            with col1:
                classification_filter = st.selectbox(
                    "Filtrar por clasificaci√≥n",
                    ["Todos", "Caliente", "Normal", "Fr√≠o"]
                )
            
            with col2:
                sort_by = st.selectbox(
                    "Ordenar por",
                    ["Frecuencia Absoluta", "N√∫mero", "Frecuencia Relativa"]
                )
            
            # Aplicar filtros
            if classification_filter != "Todos":
                df_filtered = df_freq[df_freq['Clasificaci√≥n'] == classification_filter]
            else:
                df_filtered = df_freq
            
            # Aplicar ordenamiento
            if sort_by == "Frecuencia Absoluta":
                df_filtered = df_filtered.sort_values(by='Frecuencia Absoluta', ascending=False)
            elif sort_by == "N√∫mero":
                df_filtered = df_filtered.sort_values(by='N√∫mero', ascending=True)
            else:
                df_filtered = df_filtered.sort_values(by='Frecuencia_Relativa_Num', ascending=False)
            
            # Remover columna num√©rica auxiliar para mostrar
            df_filtered = df_filtered.drop('Frecuencia_Relativa_Num', axis=1)
            
            st.dataframe(df_filtered, width='stretch')
            
            # Distribuci√≥n de frecuencias
            st.subheader("üìä Distribuci√≥n de Frecuencias")
            
            fig = px.histogram(
                df_freq,
                x='Frecuencia Absoluta',
                nbins=20,
                title="Distribuci√≥n de Frecuencias de N√∫meros",
                labels={'Frecuencia Absoluta': 'Frecuencia', 'count': 'Cantidad de N√∫meros'}
            )
            st.plotly_chart(fig, width='stretch')
            
            # An√°lisis por rangos
            st.subheader("üéØ An√°lisis por Rangos de N√∫meros")
            
            range_analysis = analyzer.analyze_by_ranges(days=days_to_analyze)
            if range_analysis:
                df_ranges = pd.DataFrame.from_records(range_analysis, columns=['Rango', 'Frecuencia Promedio', 'N√∫meros en Rango'])
                
                fig = px.bar(
                    df_ranges,
                    x='Rango',
                    y='Frecuencia Promedio',
                    title="Frecuencia Promedio por Rango de N√∫meros",
                    labels={'Frecuencia Promedio': 'Frecuencia Promedio'}
                )
                st.plotly_chart(fig, width='stretch')
    else:
        st.warning("‚ö†Ô∏è No hay datos suficientes para el an√°lisis. Actualiza los datos hist√≥ricos primero.")

with tab3:
    st.header("üéØ Predicciones y Recomendaciones")
    
    if total_draws > 0:
        # Configuraci√≥n de predicci√≥n
        col1, col2 = st.columns(2)
        
        with col1:
            num_predictions = st.slider(
                "Cantidad de n√∫meros a predecir",
                min_value=5,
                max_value=20,
                value=10,
                help="N√∫mero de predicciones a generar"
            )
        
        with col2:
            confidence_threshold = st.slider(
                "Umbral de confianza (%)",
                min_value=50,
                max_value=95,
                value=70,
                help="Nivel m√≠nimo de confianza para las predicciones"
            )
        
        if st.button("üéØ Generar Predicciones", type="primary"):
            with st.spinner("Generando predicciones..."):
                predictions = predictor.generate_predictions(
                    method=prediction_method.lower().replace(" ", "_"),
                    days=days_to_analyze,
                    num_predictions=num_predictions,
                    confidence_threshold=confidence_threshold
                )
                
                if predictions:
                    st.success("‚úÖ Predicciones generadas exitosamente")
                    
                    # Mostrar predicciones
                    st.subheader("üéØ N√∫meros Recomendados")
                    
                    df_pred = pd.DataFrame.from_records(predictions, columns=['N√∫mero', 'Puntuaci√≥n_Num', 'Confianza_Num', 'Raz√≥n'])
                    # Crear columnas formateadas para mostrar
                    df_pred['Confianza'] = df_pred['Confianza_Num'].apply(lambda x: f"{x:.1%}")
                    df_pred['Puntuaci√≥n'] = df_pred['Puntuaci√≥n_Num'].apply(lambda x: f"{x:.2f}")
                    
                    # Mostrar en formato de cards
                    cols = st.columns(5)
                    for i, (_, row) in enumerate(df_pred.head(10).iterrows()):
                        with cols[i % 5]:
                            st.metric(
                                label=f"#{i+1}",
                                value=str(row['N√∫mero']),
                                delta=str(row['Confianza']),
                                help=str(row['Raz√≥n'])
                            )
                    
                    # Tabla detallada
                    st.subheader("üìã Detalles de Predicciones")
                    # Mostrar solo columnas formateadas para la tabla
                    display_df = df_pred[['N√∫mero', 'Puntuaci√≥n', 'Confianza', 'Raz√≥n']]
                    st.dataframe(display_df, width='stretch')
                    
                    # Gr√°fico de confianza
                    fig = px.bar(
                        df_pred,
                        x='N√∫mero',
                        y='Puntuaci√≥n_Num',
                        title="Puntuaci√≥n de Predicciones",
                        labels={'Puntuaci√≥n_Num': 'Puntuaci√≥n de Predicci√≥n'},
                        color='Puntuaci√≥n_Num',
                        color_continuous_scale='Viridis'
                    )
                    st.plotly_chart(fig, width='stretch')
                else:
                    st.error("‚ùå No se pudieron generar predicciones. Verifica los datos.")
        
        # Historial de sorteos recientes
        st.subheader("üìÖ √öltimos Sorteos")
        recent_results = db.get_recent_draws(limit=10)
        
        if recent_results:
            df_recent = pd.DataFrame.from_records(recent_results, columns=['Fecha', 'N√∫mero Ganador', 'Posici√≥n', 'Premio'])
            df_recent['Fecha'] = pd.to_datetime(df_recent['Fecha']).dt.strftime('%Y-%m-%d')
            if 'Premio' in df_recent.columns:
                df_recent['Premio'] = df_recent['Premio'].apply(format_currency)
            
            st.dataframe(df_recent, width='stretch')
    else:
        st.warning("‚ö†Ô∏è Se requieren datos hist√≥ricos para generar predicciones.")

with tab4:
    st.header("üìä Estad√≠sticas Avanzadas")
    
    if total_draws > 0:
        # Tendencias temporales
        st.subheader("üìà Tendencias Temporales")
        
        temporal_data = analyzer.get_temporal_trends(days=days_to_analyze)
        if temporal_data:
            df_temporal = pd.DataFrame(temporal_data)
            df_temporal['Fecha'] = pd.to_datetime(df_temporal['Fecha'])
            
            fig = px.line(
                df_temporal,
                x='Fecha',
                y='Frecuencia_Promedio',
                title="Tendencia de Frecuencia Promedio en el Tiempo",
                labels={'Frecuencia_Promedio': 'Frecuencia Promedio'}
            )
            st.plotly_chart(fig, width='stretch')
        
        # Correlaciones
        st.subheader("üîó An√°lisis de Correlaciones")
        
        correlations = analyzer.calculate_correlations(days=days_to_analyze)
        if correlations:
            st.write("Correlaciones entre apariciones de n√∫meros:")
            
            # Heatmap de correlaciones (muestra simplificada)
            st.write("üìä Los n√∫meros con correlaciones m√°s altas tienden a aparecer juntos.")
            
            # Mostrar top correlaciones
            top_correlations = correlations[:10]  # Top 10 correlaciones
            df_corr = pd.DataFrame.from_records(top_correlations, columns=['N√∫mero 1', 'N√∫mero 2', 'Correlaci√≥n', 'Significancia'])
            df_corr['Correlaci√≥n'] = df_corr['Correlaci√≥n'].apply(lambda x: f"{x:.3f}")
            
            st.dataframe(df_corr, width='stretch')
        
        # Estad√≠sticas de rendimiento
        st.subheader("‚ö° Estad√≠sticas de Rendimiento")
        
        performance_stats = analyzer.get_performance_statistics()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric(
                "N√∫meros √önicos Registrados",
                performance_stats.get('unique_numbers', 0)
            )
            st.metric(
                "Promedio de Sorteos por D√≠a",
                f"{performance_stats.get('avg_draws_per_day', 0):.1f}"
            )
        
        with col2:
            st.metric(
                "N√∫mero M√°s Frecuente",
                performance_stats.get('most_frequent_number', 'N/A')
            )
            st.metric(
                "N√∫mero Menos Frecuente",
                performance_stats.get('least_frequent_number', 'N/A')
            )
        
        # Informaci√≥n adicional
        st.subheader("‚ÑπÔ∏è Informaci√≥n del Sistema")
        
        st.info("""
        **Metodolog√≠a de An√°lisis:**
        - üî• **N√∫meros Calientes**: Aparecen con frecuencia superior al promedio
        - üßä **N√∫meros Fr√≠os**: Aparecen con frecuencia inferior al promedio
        - üìä **Frecuencia Relativa**: Probabilidad hist√≥rica de aparici√≥n
        - üéØ **Predicciones**: Basadas en an√°lisis estad√≠stico, no garantizan resultados
        
        **Descargo de Responsabilidad:**
        Este sistema es para fines educativos y de entretenimiento. Los juegos de azar 
        son impredecibles por naturaleza y ning√∫n an√°lisis estad√≠stico puede garantizar 
        resultados futuros.
        """)
    else:
        st.warning("‚ö†Ô∏è No hay datos suficientes para estad√≠sticas avanzadas.")

with tab5:
    st.header("‚è∞ An√°lisis Temporal Avanzado")
    
    if total_draws > 0:
        # An√°lisis por d√≠a de la semana
        st.subheader("üìÖ Patrones por D√≠a de la Semana")
        
        day_patterns = analyzer.analyze_day_of_week_patterns(days=days_to_analyze)
        
        if day_patterns:
            # Preparar datos para visualizaci√≥n
            days_data = []
            for day, stats in day_patterns.items():
                days_data.append({
                    'D√≠a': day,
                    'Total Sorteos': stats['total_draws'],
                    'N√∫meros √önicos': stats['unique_numbers'],
                    'M√°s Frecuente': stats['most_frequent'],
                    'Promedio': round(stats['avg_number'], 1)
                })
            
            df_days = pd.DataFrame(days_data)
            # Orden cronol√≥gico para d√≠as de la semana
            day_order = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
            df_days['D√≠a'] = pd.Categorical(df_days['D√≠a'], categories=day_order, ordered=True)
            df_days = df_days.sort_values('D√≠a')
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Gr√°fico de barras de sorteos por d√≠a
                fig = px.bar(
                    df_days,
                    x='D√≠a',
                    y='Total Sorteos',
                    title="Total de Sorteos por D√≠a de la Semana",
                    labels={'Total Sorteos': 'Cantidad de Sorteos'},
                    category_orders={'D√≠a': day_order}
                )
                st.plotly_chart(fig, width='stretch')
            
            with col2:
                # Gr√°fico de n√∫meros √∫nicos por d√≠a
                fig = px.bar(
                    df_days,
                    x='D√≠a',
                    y='N√∫meros √önicos',
                    title="N√∫meros √önicos por D√≠a de la Semana",
                    labels={'N√∫meros √önicos': 'Cantidad de N√∫meros √önicos'},
                    color='N√∫meros √önicos',
                    color_continuous_scale='Blues',
                    category_orders={'D√≠a': day_order}
                )
                st.plotly_chart(fig, width='stretch')
            
            # Tabla resumen
            st.dataframe(df_days, width='stretch')
        
        # An√°lisis mensual
        st.subheader("üìÜ Patrones por Mes del A√±o")
        
        monthly_patterns = analyzer.analyze_monthly_patterns(days=days_to_analyze)
        
        if monthly_patterns:
            months_data = []
            for month, stats in monthly_patterns.items():
                months_data.append({
                    'Mes': month,
                    'Total Sorteos': stats['total_draws'],
                    'N√∫meros √önicos': stats['unique_numbers'],
                    'M√°s Frecuente': stats['most_frequent'],
                    'Promedio': round(stats['avg_number'], 1)
                })
            
            df_months = pd.DataFrame(months_data)
            
            if len(df_months) > 0:
                # Orden cronol√≥gico para meses
                spanish_month_order = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                                     'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre']
                df_months['Mes'] = pd.Categorical(df_months['Mes'], categories=spanish_month_order, ordered=True)
                df_months = df_months.sort_values('Mes')
                
                # Gr√°fico de sorteos por mes
                fig = px.bar(
                    df_months,
                    x='Mes',
                    y='Total Sorteos',
                    title="Distribuci√≥n de Sorteos por Mes",
                    labels={'Total Sorteos': 'Cantidad de Sorteos'},
                    category_orders={'Mes': spanish_month_order}
                )
                fig.update_xaxes(tickangle=45)
                st.plotly_chart(fig, width='stretch')
                
                st.dataframe(df_months, width='stretch')
        
        # Tendencias EWMA
        st.subheader("üìà Tendencias EWMA (Promedio M√≥vil Exponencial)")
        
        st.info("""
        **¬øQu√© es EWMA?**
        El Promedio M√≥vil Exponencial da m√°s peso a las observaciones recientes, 
        permitiendo detectar tendencias emergentes en la frecuencia de n√∫meros.
        """)
        
        ewma_trends = analyzer.calculate_ewma_trends(days=days_to_analyze)
        
        if ewma_trends:
            # Ordenar por tendencia
            sorted_trends = sorted(ewma_trends.items(), key=lambda x: x[1], reverse=True)
            
            # Top 15 tendencias m√°s altas
            top_trends = sorted_trends[:15]
            
            trends_data = []
            for number, trend in top_trends:
                trends_data.append({
                    'N√∫mero': number,
                    'Tendencia EWMA': round(trend, 3),
                    'Clasificaci√≥n': 'Alta' if trend > np.mean(list(ewma_trends.values())) else 'Normal'
                })
            
            df_trends = pd.DataFrame(trends_data)
            
            # Gr√°fico de tendencias
            fig = px.bar(
                df_trends,
                x='N√∫mero',
                y='Tendencia EWMA',
                title="Top 15 N√∫meros con Mayor Tendencia EWMA",
                labels={'Tendencia EWMA': 'Valor de Tendencia'},
                color='Tendencia EWMA',
                color_continuous_scale='Viridis'
            )
            st.plotly_chart(fig, width='stretch')
            
            st.dataframe(df_trends, width='stretch')
        
        # Detecci√≥n de cambios significativos
        st.subheader("üîç Cambios Significativos en Frecuencias")
        
        st.info("""
        **An√°lisis de Cambios:**
        Detecta n√∫meros que han experimentado cambios significativos en su frecuencia 
        comparando el per√≠odo reciente con el per√≠odo anterior.
        """)
        
        frequency_changes = analyzer.detect_frequency_changes(days=days_to_analyze)
        
        if frequency_changes:
            changes_data = []
            for change in frequency_changes[:15]:  # Top 15 cambios
                changes_data.append({
                    'N√∫mero': change['number'],
                    'Tipo de Cambio': change['change_type'],
                    'Cambio %': f"{change['change_ratio']:.1%}",
                    'Freq. Reciente': change['recent_frequency'],
                    'Freq. Anterior': change['previous_frequency'],
                    'Significancia': round(change['significance'], 3)
                })
            
            df_changes = pd.DataFrame(changes_data)
            
            # Separar incrementos y disminuciones
            incrementos = df_changes[df_changes['Tipo de Cambio'] == 'Incremento']
            disminuciones = df_changes[df_changes['Tipo de Cambio'] == 'Disminuci√≥n']
            
            col1, col2 = st.columns(2)
            
            with col1:
                if len(incrementos) > 0:
                    st.subheader("‚¨ÜÔ∏è Mayores Incrementos")
                    st.dataframe(incrementos.head(10), width='stretch')
            
            with col2:
                if len(disminuciones) > 0:
                    st.subheader("‚¨áÔ∏è Mayores Disminuciones")
                    st.dataframe(disminuciones.head(10), width='stretch')
            
            # Gr√°fico de cambios
            if len(df_changes) > 0:
                fig = px.scatter(
                    df_changes,
                    x='Freq. Anterior',
                    y='Freq. Reciente',
                    size='Significancia',
                    color='Tipo de Cambio',
                    hover_name='N√∫mero',
                    title="Cambios en Frecuencias: Anterior vs Reciente",
                    labels={
                        'Freq. Anterior': 'Frecuencia Per√≠odo Anterior',
                        'Freq. Reciente': 'Frecuencia Per√≠odo Reciente'
                    }
                )
                # L√≠nea diagonal para referencia (sin cambio)
                max_val = max(df_changes['Freq. Anterior'].max(), df_changes['Freq. Reciente'].max())
                fig.add_shape(
                    type="line",
                    x0=0, y0=0, x1=max_val, y1=max_val,
                    line=dict(color="gray", dash="dash")
                )
                st.plotly_chart(fig, width='stretch')
        else:
            st.info("No se detectaron cambios significativos en las frecuencias en este per√≠odo.")
    
    else:
        st.warning("‚ö†Ô∏è Se requieren datos hist√≥ricos para el an√°lisis temporal.")

with tab6:
    st.header("ü§ù An√°lisis de Co-ocurrencia y Patrones")
    
    if total_draws > 0:
        # An√°lisis de co-ocurrencia
        st.subheader("üîó Co-ocurrencia de N√∫meros")
        st.write("An√°lisis de qu√© n√∫meros aparecen juntos con mayor frecuencia en el mismo sorteo.")
        
        # Controles para co-ocurrencia
        col1, col2 = st.columns(2)
        with col1:
            cooccurrence_days = st.selectbox(
                "Per√≠odo de an√°lisis para co-ocurrencia",
                [90, 180, 365, 720],
                index=1,
                help="D√≠as hacia atr√°s para analizar co-ocurrencias"
            )
        
        with col2:
            min_cooccurrence = st.number_input(
                "Frecuencia m√≠nima de co-ocurrencia",
                min_value=2,
                max_value=20,
                value=3,
                help="N√∫mero m√≠nimo de veces que deben aparecer juntos"
            )
        
        # Calcular co-ocurrencias
        with st.spinner("Analizando co-ocurrencias..."):
            cooccurrences = analyzer.analyze_number_cooccurrence(days=cooccurrence_days)
        
        if cooccurrences:
            # Crear tabla de las mejores co-ocurrencias
            best_pairs = []
            for num1, partners in cooccurrences.items():
                for num2, freq in partners.items():
                    if freq >= min_cooccurrence and num1 < num2:  # Evitar duplicados
                        best_pairs.append({
                            'N√∫mero 1': num1,
                            'N√∫mero 2': num2,
                            'Frecuencia': freq,
                            'Par': f"{num1}-{num2}"
                        })
            
            if best_pairs:
                df_pairs = pd.DataFrame(best_pairs)
                df_pairs = df_pairs.sort_values('Frecuencia', ascending=False)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üèÜ Mejores Pares")
                    st.dataframe(df_pairs.head(20), width='stretch')
                
                with col2:
                    # Gr√°fico de barras de mejores pares
                    top_pairs = df_pairs.head(15)
                    fig = px.bar(
                        top_pairs,
                        x='Par',
                        y='Frecuencia',
                        title="Top 15 Pares M√°s Frecuentes",
                        labels={'Frecuencia': 'Veces que Aparecieron Juntos'}
                    )
                    fig.update_xaxes(tickangle=45)
                    st.plotly_chart(fig, width='stretch')
            else:
                st.info("No se encontraron pares con la frecuencia m√≠nima especificada.")
        else:
            st.warning("No se pudieron calcular co-ocurrencias para el per√≠odo seleccionado.")
        
        # An√°lisis de transiciones de d√≠gitos
        st.subheader("üîÑ Transiciones de D√≠gitos")
        st.write("An√°lisis de c√≥mo cambian los d√≠gitos de un n√∫mero al siguiente en secuencias temporales.")
        
        transition_days = st.selectbox(
            "Per√≠odo para an√°lisis de transiciones",
            [30, 60, 90, 180],
            index=2,
            help="D√≠as para analizar transiciones de d√≠gitos"
        )
        
        with st.spinner("Analizando transiciones de d√≠gitos..."):
            transitions = analyzer.analyze_digit_transitions(days=transition_days)
        
        if transitions:
            # Mostrar transiciones m√°s frecuentes
            transition_data = []
            for key, next_digits in transitions.items():
                for next_digit, freq in next_digits.items():
                    if freq >= 2:  # M√≠nimo 2 ocurrencias
                        transition_data.append({
                            'Transici√≥n': f"{key} ‚Üí {next_digit}",
                            'Frecuencia': freq,
                            'Posici√≥n': key.split('_')[1],
                            'De': key.split('_')[2],
                            'A': next_digit
                        })
            
            if transition_data:
                df_transitions = pd.DataFrame(transition_data)
                df_transitions = df_transitions.sort_values('Frecuencia', ascending=False)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üîÑ Transiciones M√°s Frecuentes")
                    st.dataframe(df_transitions.head(20), width='stretch')
                
                with col2:
                    # Gr√°fico de transiciones por posici√≥n
                    pos_0 = df_transitions[df_transitions['Posici√≥n'] == '0'].head(10)
                    if len(pos_0) > 0:
                        fig = px.bar(
                            pos_0,
                            x='Transici√≥n',
                            y='Frecuencia',
                            title="Top Transiciones - Primera Posici√≥n",
                            labels={'Frecuencia': 'Cantidad de Transiciones'}
                        )
                        fig.update_xaxes(tickangle=45)
                        st.plotly_chart(fig, width='stretch')
        else:
            st.warning("No se pudieron calcular transiciones para el per√≠odo seleccionado.")
        
        # Patrones de combinaci√≥n
        st.subheader("üß© Patrones de Combinaci√≥n")
        st.write("An√°lisis de patrones matem√°ticos en las combinaciones de n√∫meros (suma, paridad, rangos).")
        
        col1, col2 = st.columns(2)
        with col1:
            pattern_days = st.selectbox(
                "Per√≠odo para patrones",
                [90, 180, 365],
                index=1,
                help="D√≠as para analizar patrones de combinaci√≥n"
            )
        
        with col2:
            min_pattern_freq = st.number_input(
                "Frecuencia m√≠nima del patr√≥n",
                min_value=3,
                max_value=20,
                value=5,
                help="M√≠nimas ocurrencias para considerar un patr√≥n v√°lido"
            )
        
        with st.spinner("Buscando patrones de combinaci√≥n..."):
            patterns = analyzer.find_combination_patterns(
                min_frequency=min_pattern_freq, 
                days=pattern_days
            )
        
        if patterns:
            col1, col2 = st.columns(2)
            
            with col1:
                # Patrones de suma
                sum_patterns = [p for p in patterns if p['type'] == 'suma_rango']
                if sum_patterns:
                    st.subheader("‚ûï Patrones de Suma")
                    for pattern in sum_patterns[:10]:
                        st.write(f"**Rango {pattern['pattern']}**: {pattern['frequency']} veces")
                        with st.expander(f"Ejemplos de {pattern['pattern']}"):
                            for example in pattern['examples']:
                                st.write(f"‚Ä¢ {example} (suma: {sum(example)})")
            
            with col2:
                # Patrones de paridad
                parity_patterns = [p for p in patterns if p['type'] == 'paridad']
                if parity_patterns:
                    st.subheader("‚öñÔ∏è Patrones de Paridad")
                    for pattern in parity_patterns[:10]:
                        st.write(f"**{pattern['pattern']}**: {pattern['frequency']} veces")
                        with st.expander(f"Ejemplos de {pattern['pattern']}"):
                            for example in pattern['examples']:
                                st.write(f"‚Ä¢ {example}")
            
            # Gr√°fico resumen de patrones
            if len(patterns) > 0:
                pattern_df = pd.DataFrame(patterns)
                fig = px.bar(
                    pattern_df.head(15),
                    x='pattern',
                    y='frequency',
                    color='type',
                    title="Patrones de Combinaci√≥n M√°s Frecuentes",
                    labels={
                        'frequency': 'Frecuencia',
                        'pattern': 'Patr√≥n',
                        'type': 'Tipo de Patr√≥n'
                    }
                )
                fig.update_xaxes(tickangle=45)
                st.plotly_chart(fig, width='stretch')
        else:
            st.info("No se encontraron patrones con la frecuencia m√≠nima especificada.")
    
    else:
        st.warning("‚ö†Ô∏è Se requieren datos hist√≥ricos para el an√°lisis de co-ocurrencia y patrones.")

with tab7:
    st.header("üìÖ Recomendaciones Inteligentes por D√≠a")
    st.write("Sistema de recomendaciones que combina m√∫ltiples an√°lisis para sugerir n√∫meros seg√∫n el d√≠a de la semana seleccionado.")
    
    if total_draws > 0:
        # Selector de d√≠a
        col1, col2, col3 = st.columns(3)
        
        with col1:
            target_day = st.selectbox(
                "Selecciona el d√≠a de la semana",
                ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"],
                help="D√≠a para el cual generar recomendaciones"
            )
        
        with col2:
            recommendation_period = st.selectbox(
                "Per√≠odo de an√°lisis",
                [90, 180, 365, 720],
                index=2,
                help="D√≠as hist√≥ricos para el an√°lisis"
            )
        
        with col3:
            num_recommendations = st.slider(
                "N√∫mero de recomendaciones",
                min_value=5,
                max_value=20,
                value=10,
                help="Cantidad de n√∫meros a recomendar"
            )
        
        if st.button("üéØ Generar Recomendaciones Inteligentes", type="primary"):
            with st.spinner("Analizando patrones y generando recomendaciones..."):
                
                # 1. An√°lisis por d√≠a de la semana
                day_patterns = analyzer.analyze_day_of_week_patterns(days=recommendation_period)
                day_specific_numbers = []
                
                if target_day in day_patterns:
                    day_stats = day_patterns[target_day]
                    if 'top_numbers' in day_stats:
                        day_specific_numbers = day_stats['top_numbers'][:10]
                
                # 2. An√°lisis de tendencias EWMA
                ewma_trends = analyzer.calculate_ewma_trends(days=recommendation_period)
                trending_numbers = []
                if ewma_trends:
                    sorted_trends = sorted(ewma_trends.items(), key=lambda x: x[1], reverse=True)
                    trending_numbers = [num for num, trend in sorted_trends[:15] if trend > 0]
                
                # 3. An√°lisis de co-ocurrencia para n√∫meros calientes
                hot_numbers = analyzer.get_hot_numbers(days=60, limit=5)
                hot_nums = [num for num, _, _ in hot_numbers] if hot_numbers else []
                
                cooccurrence_recommendations = []
                if hot_nums:
                    cooccurrences = analyzer.analyze_number_cooccurrence(days=recommendation_period)
                    for hot_num in hot_nums:
                        if hot_num in cooccurrences:
                            partners = cooccurrences[hot_num]
                            # Obtener los mejores compa√±eros del n√∫mero caliente
                            best_partners = sorted(partners.items(), key=lambda x: x[1], reverse=True)[:3]
                            cooccurrence_recommendations.extend([partner for partner, _ in best_partners])
                
                # 4. An√°lisis de frecuencia general 
                frequency_data = analyzer.calculate_all_frequencies(days=recommendation_period)
                balanced_numbers = []
                if frequency_data:
                    # N√∫meros con clasificaci√≥n "Normal" y "Caliente" 
                    for num, freq, rel_freq, classification in frequency_data:
                        if classification in ["Normal", "Caliente"]:
                            balanced_numbers.append((num, freq, rel_freq))
                    balanced_numbers = sorted(balanced_numbers, key=lambda x: x[2], reverse=True)[:10]
                    balanced_numbers = [num for num, _, _ in balanced_numbers]
                
                # 5. Combinar todas las recomendaciones con sistema de puntuaci√≥n
                recommendation_scores = {}
                
                # Puntuaci√≥n por an√°lisis espec√≠fico del d√≠a (peso alto)
                for i, num in enumerate(day_specific_numbers):
                    recommendation_scores[num] = recommendation_scores.get(num, 0) + (50 - i * 2)
                
                # Puntuaci√≥n por tendencias EWMA (peso medio-alto)
                for i, num in enumerate(trending_numbers):
                    recommendation_scores[num] = recommendation_scores.get(num, 0) + (30 - i)
                
                # Puntuaci√≥n por co-ocurrencia (peso medio)
                for num in cooccurrence_recommendations:
                    recommendation_scores[num] = recommendation_scores.get(num, 0) + 15
                
                # Puntuaci√≥n por frecuencia balanceada (peso bajo)
                for i, num in enumerate(balanced_numbers):
                    recommendation_scores[num] = recommendation_scores.get(num, 0) + (10 - i)
                
                # Ordenar por puntuaci√≥n y seleccionar los mejores
                if recommendation_scores:
                    sorted_recommendations = sorted(recommendation_scores.items(), key=lambda x: x[1], reverse=True)
                    final_recommendations = sorted_recommendations[:num_recommendations]
                    
                    # Mostrar resultados
                    st.success(f"‚úÖ Recomendaciones generadas para {target_day}")
                    
                    # Panel de recomendaciones principales
                    st.subheader("üèÜ N√∫meros Recomendados")
                    
                    # Mostrar en formato de cards
                    cols = st.columns(5)
                    # Calcular max_score una vez para todas las recomendaciones
                    max_score = max([s for _, s in final_recommendations]) if final_recommendations else 1
                    
                    for i, (number, score) in enumerate(final_recommendations[:10]):
                        with cols[i % 5]:
                            # Calcular confianza basada en la puntuaci√≥n
                            confidence = (score / max_score) * 100
                            
                            st.metric(
                                label=f"#{i+1}",
                                value=str(number),
                                delta=f"{confidence:.0f}% confianza",
                                help=f"Puntuaci√≥n: {score}"
                            )
                    
                    # Tabla detallada con an√°lisis
                    st.subheader("üìä An√°lisis Detallado de Recomendaciones")
                    
                    detailed_data = []
                    for number, score in final_recommendations:
                        # Determinar fuentes de la recomendaci√≥n
                        sources = []
                        if number in [n for n, _, _ in hot_numbers] if hot_numbers else []:
                            sources.append("üî• N√∫mero Caliente")
                        if number in day_specific_numbers:
                            sources.append(f"üìÖ Espec√≠fico de {target_day}")
                        if number in trending_numbers:
                            sources.append("üìà Tendencia EWMA")
                        if number in cooccurrence_recommendations:
                            sources.append("ü§ù Co-ocurrencia")
                        if number in balanced_numbers:
                            sources.append("‚öñÔ∏è Frecuencia Balanceada")
                        
                        # Obtener frecuencia actual
                        freq_abs, freq_rel = db.get_number_frequency(number, days=60)
                        
                        detailed_data.append({
                            'N√∫mero': number,
                            'Puntuaci√≥n': score,
                            'Confianza': f"{(score / max_score) * 100:.0f}%",
                            'Frecuencia (60d)': freq_abs,
                            'Fuentes': " | ".join(sources[:3])  # M√°ximo 3 fuentes
                        })
                    
                    df_detailed = pd.DataFrame(detailed_data)
                    st.dataframe(df_detailed, width='stretch')
                    
                    # Gr√°fico de puntuaciones
                    fig = px.bar(
                        df_detailed.head(15),
                        x='N√∫mero',
                        y='Puntuaci√≥n',
                        title="Puntuaci√≥n de Recomendaciones",
                        labels={'Puntuaci√≥n': 'Puntuaci√≥n Total'},
                        color='Puntuaci√≥n',
                        color_continuous_scale='viridis'
                    )
                    st.plotly_chart(fig, width='stretch')
                    
                    # Panel de informaci√≥n del m√©todo
                    with st.expander("‚ÑπÔ∏è Metodolog√≠a de Recomendaciones"):
                        st.write("""
                        **Sistema de Puntuaci√≥n Combinado:**
                        
                        1. **An√°lisis Espec√≠fico del D√≠a** (peso alto): N√∫meros que hist√≥ricamente salen m√°s en el d√≠a seleccionado
                        2. **Tendencias EWMA** (peso medio-alto): N√∫meros con tendencia creciente seg√∫n promedio m√≥vil exponencial
                        3. **Co-ocurrencia** (peso medio): N√∫meros que frecuentemente aparecen junto a n√∫meros calientes actuales
                        4. **Frecuencia Balanceada** (peso bajo): N√∫meros con frecuencia normal/caliente para equilibrio
                        
                        **Ventajas del Sistema:**
                        - ‚úÖ Combina m√∫ltiples an√°lisis estad√≠sticos
                        - ‚úÖ Considera patrones espec√≠ficos por d√≠a de la semana
                        - ‚úÖ Incluye an√°lisis de tendencias recientes
                        - ‚úÖ Balancea n√∫meros calientes y normales
                        
                        **Nota:** Las recomendaciones son sugerencias basadas en an√°lisis hist√≥rico y no garantizan resultados.
                        """)
                    
                else:
                    st.warning("No se pudieron generar recomendaciones con los datos disponibles.")
        
        # Estad√≠sticas del d√≠a seleccionado
        st.subheader(f"üìä Estad√≠sticas Hist√≥ricas para {target_day}")
        
        day_patterns = analyzer.analyze_day_of_week_patterns(days=recommendation_period)
        if target_day in day_patterns:
            day_stats = day_patterns[target_day]
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    "Total de Sorteos",
                    day_stats['total_draws'],
                    help=f"Sorteos realizados en {target_day} durante los √∫ltimos {recommendation_period} d√≠as"
                )
            
            with col2:
                st.metric(
                    "N√∫meros √önicos",
                    day_stats['unique_numbers'],
                    help="Cantidad de n√∫meros diferentes que han salido"
                )
            
            with col3:
                st.metric(
                    "M√°s Frecuente",
                    day_stats['most_frequent'],
                    help="N√∫mero que m√°s veces ha salido en este d√≠a"
                )
            
            with col4:
                st.metric(
                    "Promedio",
                    f"{day_stats['avg_number']:.1f}",
                    help="Promedio de los n√∫meros que salen en este d√≠a"
                )
        
    else:
        st.warning("‚ö†Ô∏è Se requieren datos hist√≥ricos para generar recomendaciones por d√≠a.")

# Footer
st.markdown("---")
st.markdown(
    "üéØ **Sistema de An√°lisis Estad√≠stico Quiniela Loteka** | "
    "Desarrollado para an√°lisis educativo de patrones en loter√≠a"
)
