#!/usr/bin/env python3
"""
Script para analizar y corregir problemas en la base de datos de sorteos:
1. Identificar datos duplicados
2. Corregir error de fechas (d√≠a 22 puesto en d√≠a 23)
3. Eliminar duplicados
"""

import sqlite3
import pandas as pd
from datetime import datetime, timedelta

def analyze_database():
    """Analiza la base de datos para identificar problemas"""
    db_path = "quiniela_loteka.db"
    
    with sqlite3.connect(db_path) as conn:
        print("=== AN√ÅLISIS DE LA BASE DE DATOS ===\n")
        
        # 1. Verificar datos duplicados
        print("1. B√öSQUEDA DE DATOS DUPLICADOS:")
        cursor = conn.cursor()
        cursor.execute("""
            SELECT date, number, position, COUNT(*) as duplicates
            FROM draw_results 
            GROUP BY date, number, position 
            HAVING COUNT(*) > 1 
            ORDER BY date DESC
        """)
        duplicates = cursor.fetchall()
        
        if duplicates:
            print(f"   ‚ùå Encontrados {len(duplicates)} grupos de datos duplicados:")
            for row in duplicates:
                print(f"      Fecha: {row[0]}, N√∫mero: {row[1]}, Posici√≥n: {row[2]}, Duplicados: {row[3]}")
        else:
            print("   ‚úÖ No se encontraron datos duplicados exactos")
        
        # 2. Verificar datos recientes (√∫ltimos 7 d√≠as)
        print(f"\n2. AN√ÅLISIS DE DATOS RECIENTES:")
        cursor.execute("""
            SELECT date, number, position, prize_amount, created_at
            FROM draw_results 
            WHERE date >= date('now', '-7 days')
            ORDER BY date DESC, position
        """)
        recent_data = cursor.fetchall()
        
        print(f"   üìÖ Datos de los √∫ltimos 7 d√≠as:")
        for row in recent_data:
            print(f"      {row[0]} | N√∫m: {row[1]} | Pos: {row[2]} | Premio: {row[3]} | Creado: {row[4]}")
        
        # 3. Verificar espec√≠ficamente septiembre 22 y 23, 2025
        print(f"\n3. VERIFICACI√ìN DE FECHAS ESPEC√çFICAS (Sep 22-23, 2025):")
        for date_check in ['2025-09-22', '2025-09-23']:
            cursor.execute("""
                SELECT date, number, position, prize_amount, created_at
                FROM draw_results 
                WHERE date = ?
                ORDER BY position
            """, (date_check,))
            date_data = cursor.fetchall()
            
            print(f"   üìÖ {date_check}:")
            if date_data:
                for row in date_data:
                    print(f"      N√∫m: {row[1]} | Pos: {row[2]} | Premio: {row[3]} | Creado: {row[4]}")
            else:
                print(f"      Sin datos para esta fecha")
        
        # 4. Contar total de registros por fecha reciente
        print(f"\n4. CONTEO DE REGISTROS POR FECHA (√∫ltimos 10 d√≠as):")
        cursor.execute("""
            SELECT date, COUNT(*) as total_records
            FROM draw_results 
            WHERE date >= date('now', '-10 days')
            GROUP BY date
            ORDER BY date DESC
        """)
        daily_counts = cursor.fetchall()
        
        for row in daily_counts:
            print(f"   üìÖ {row[0]}: {row[1]} registros")
            
        return duplicates, recent_data

def fix_duplicate_data():
    """Elimina datos duplicados manteniendo solo el m√°s reciente"""
    db_path = "quiniela_loteka.db"
    
    with sqlite3.connect(db_path) as conn:
        print("\n=== ELIMINACI√ìN DE DATOS DUPLICADOS ===")
        
        cursor = conn.cursor()
        
        # Encontrar duplicados con sus IDs
        cursor.execute("""
            SELECT id, date, number, position, created_at
            FROM draw_results a
            WHERE EXISTS (
                SELECT 1 FROM draw_results b 
                WHERE a.date = b.date 
                AND a.number = b.number 
                AND a.position = b.position 
                AND a.id != b.id
            )
            ORDER BY date, number, position, created_at
        """)
        
        all_duplicates = cursor.fetchall()
        
        if not all_duplicates:
            print("   ‚úÖ No hay duplicados para eliminar")
            return
        
        print(f"   üîç Encontrados {len(all_duplicates)} registros duplicados")
        
        # Agrupar duplicados y mantener solo el m√°s reciente
        groups = {}
        for row in all_duplicates:
            key = (row[1], row[2], row[3])  # (date, number, position)
            if key not in groups:
                groups[key] = []
            groups[key].append(row)
        
        deleted_count = 0
        for key, group in groups.items():
            if len(group) > 1:
                # Ordenar por created_at DESC y mantener el primero (m√°s reciente)
                group.sort(key=lambda x: x[4], reverse=True)
                keep_id = group[0][0]
                
                print(f"   üìÖ {key[0]} N√∫m:{key[1]} Pos:{key[2]} - Manteniendo ID {keep_id}")
                
                # Eliminar los dem√°s
                for row in group[1:]:
                    cursor.execute("DELETE FROM draw_results WHERE id = ?", (row[0],))
                    deleted_count += 1
                    print(f"      üóëÔ∏è Eliminado ID {row[0]} (creado: {row[4]})")
        
        conn.commit()
        print(f"   ‚úÖ Eliminados {deleted_count} registros duplicados")

def fix_date_error():
    """Corrige el error espec√≠fico: datos del d√≠a 22 puestos en d√≠a 23"""
    db_path = "quiniela_loteka.db"
    
    with sqlite3.connect(db_path) as conn:
        print("\n=== CORRECCI√ìN DE ERROR DE FECHAS ===")
        
        cursor = conn.cursor()
        
        # Verificar si hay datos en 2025-09-23
        cursor.execute("""
            SELECT id, date, number, position, created_at
            FROM draw_results 
            WHERE date = '2025-09-23'
            ORDER BY position
        """)
        sep_23_data = cursor.fetchall()
        
        if not sep_23_data:
            print("   ‚ÑπÔ∏è No hay datos en 2025-09-23 para verificar")
            return
        
        print(f"   üîç Datos encontrados en 2025-09-23:")
        for row in sep_23_data:
            print(f"      ID: {row[0]} | N√∫m: {row[2]} | Pos: {row[3]} | Creado: {row[4]}")
        
        # Verificar si hay datos en 2025-09-22
        cursor.execute("""
            SELECT id, date, number, position, created_at
            FROM draw_results 
            WHERE date = '2025-09-22'
            ORDER BY position
        """)
        sep_22_data = cursor.fetchall()
        
        print(f"   üîç Datos encontrados en 2025-09-22:")
        if sep_22_data:
            for row in sep_22_data:
                print(f"      ID: {row[0]} | N√∫m: {row[2]} | Pos: {row[3]} | Creado: {row[4]}")
        else:
            print("      Sin datos en 2025-09-22")
        
        # Si hay datos en 23 pero no en 22, probablemente est√°n mal
        if sep_23_data and not sep_22_data:
            print("\n   ‚ö†Ô∏è POSIBLE ERROR DETECTADO:")
            print("   Hay datos en 2025-09-23 pero no en 2025-09-22")
            print("   ¬øMover datos de 2025-09-23 a 2025-09-22? (y/n):")
            
            # Para automatizar, asumimos que s√≠ queremos mover
            response = input()
            if response.lower() == 'y':
                for row in sep_23_data:
                    cursor.execute("""
                        UPDATE draw_results 
                        SET date = '2025-09-22' 
                        WHERE id = ?
                    """, (row[0],))
                    print(f"      ‚úÖ Movido registro ID {row[0]} de 2025-09-23 a 2025-09-22")
                
                conn.commit()
                print("   ‚úÖ Correcci√≥n de fechas completada")
            else:
                print("   ‚è≠Ô∏è Correcci√≥n cancelada por el usuario")

if __name__ == "__main__":
    # Ejecutar an√°lisis
    duplicates, recent_data = analyze_database()
    
    # Ejecutar correcciones
    if duplicates:
        fix_duplicate_data()
    
    fix_date_error()
    
    print("\n=== AN√ÅLISIS FINAL ===")
    analyze_database()